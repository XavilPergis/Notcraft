use gl;

#[derive(Clone, Debug, Eq, PartialEq, Hash)]
pub struct Limits {
    pub compute_shader_storage_blocks: usize,
    pub combined_shader_storage_blocks: usize,
    pub compute_uniform_blocks: usize,
    pub compute_texture_image_units: usize,
    pub compute_uniform_components: usize,
    pub compute_atomic_counters: usize,
    pub compute_atomic_counter_buffers: usize,
    pub combined_compute_uniform_components: usize,
    pub compute_work_group_invocations: usize,
    // TODO: These seemed to give me invalid enum errors so idk
    // pub compute_work_group_count: usize,
    // pub compute_work_group_size: usize,
    pub debug_group_stack_depth: usize,
    pub texture_size_3d: usize,
    pub array_texture_layers: usize,
    pub clip_distances: usize,
    pub color_texture_samples: usize,
    pub combined_atomic_counters: usize,
    pub combined_fragment_uniform_components: usize,
    pub combined_geometry_uniform_components: usize,
    pub combined_texture_image_units: usize,
    pub combined_uniform_blocks: usize,
    pub combined_vertex_uniform_components: usize,
    pub cube_map_texture_size: usize,
    pub depth_texture_samples: usize,
    pub draw_buffers: usize,
    pub dual_source_draw_buffers: usize,
    pub elements_indices: usize,
    pub elements_vertices: usize,
    pub fragment_atomic_counters: usize,
    pub fragment_shader_storage_blocks: usize,
    pub fragment_input_components: usize,
    pub fragment_uniform_components: usize,
    pub fragment_uniform_vectors: usize,
    pub fragment_uniform_blocks: usize,
    pub framebuffer_width: usize,
    pub framebuffer_height: usize,
    pub framebuffer_layers: usize,
    pub framebuffer_samples: usize,
    pub geometry_atomic_counters: usize,
    pub geometry_shader_storage_blocks: usize,
    pub geometry_input_components: usize,
    pub geometry_output_components: usize,
    pub geometry_texture_image_units: usize,
    pub geometry_uniform_blocks: usize,
    pub geometry_uniform_components: usize,
    pub integer_samples: usize,
    pub label_length: usize,
    pub program_texel_offset: usize,
    pub rectangle_texture_size: usize,
    pub renderbuffer_size: usize,
    pub sample_mask_words: usize,
    pub server_wait_timeout: usize,
    pub shader_storage_buffer_bindings: usize,
    pub tess_control_atomic_counters: usize,
    pub tess_evaluation_atomic_counters: usize,
    pub tess_control_shader_storage_blocks: usize,
    pub tess_evaluation_shader_storage_blocks: usize,
    pub texture_buffer_size: usize,
    pub texture_image_units: usize,
    pub texture_lod_bias: usize,
    pub texture_size: usize,
    pub uniform_buffer_bindings: usize,
    pub uniform_block_size: usize,
    pub uniform_locations: usize,
    pub varying_components: usize,
    pub varying_vectors: usize,
    pub varying_floats: usize,
    pub vertex_atomic_counters: usize,
    pub vertex_attribs: usize,
    pub vertex_shader_storage_blocks: usize,
    pub vertex_texture_image_units: usize,
    pub vertex_uniform_components: usize,
    pub vertex_uniform_vectors: usize,
    pub vertex_output_components: usize,
    pub vertex_uniform_blocks: usize,
    pub viewport_dims: usize,
    pub viewports: usize,
    pub vertex_attrib_relative_offset: usize,
    pub vertex_attrib_bindings: usize,
    pub element_index: usize,
    // Don't allow outside construction of this struct
    _private_marker: (),
}

fn get_usize(token: u32) -> usize {
    let mut val = 0;
    gl_call!(assert GetIntegerv(token, &mut val));
    val as usize
}

impl Limits {
    pub(crate) fn load() -> Self {
        Limits {
            compute_shader_storage_blocks: get_usize(gl::MAX_COMPUTE_SHADER_STORAGE_BLOCKS),
            combined_shader_storage_blocks: get_usize(gl::MAX_COMBINED_SHADER_STORAGE_BLOCKS),
            compute_uniform_blocks: get_usize(gl::MAX_COMPUTE_UNIFORM_BLOCKS),
            compute_texture_image_units: get_usize(gl::MAX_COMPUTE_TEXTURE_IMAGE_UNITS),
            compute_uniform_components: get_usize(gl::MAX_COMPUTE_UNIFORM_COMPONENTS),
            compute_atomic_counters: get_usize(gl::MAX_COMPUTE_ATOMIC_COUNTERS),
            compute_atomic_counter_buffers: get_usize(gl::MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS),
            combined_compute_uniform_components: get_usize(
                gl::MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS,
            ),
            compute_work_group_invocations: get_usize(gl::MAX_COMPUTE_WORK_GROUP_INVOCATIONS),
            debug_group_stack_depth: get_usize(gl::MAX_DEBUG_GROUP_STACK_DEPTH),
            texture_size_3d: get_usize(gl::MAX_3D_TEXTURE_SIZE),
            array_texture_layers: get_usize(gl::MAX_ARRAY_TEXTURE_LAYERS),
            clip_distances: get_usize(gl::MAX_CLIP_DISTANCES),
            color_texture_samples: get_usize(gl::MAX_COLOR_TEXTURE_SAMPLES),
            combined_atomic_counters: get_usize(gl::MAX_COMBINED_ATOMIC_COUNTERS),
            combined_fragment_uniform_components: get_usize(
                gl::MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
            ),
            combined_geometry_uniform_components: get_usize(
                gl::MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS,
            ),
            combined_texture_image_units: get_usize(gl::MAX_COMBINED_TEXTURE_IMAGE_UNITS),
            combined_uniform_blocks: get_usize(gl::MAX_COMBINED_UNIFORM_BLOCKS),
            combined_vertex_uniform_components: get_usize(
                gl::MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
            ),
            cube_map_texture_size: get_usize(gl::MAX_CUBE_MAP_TEXTURE_SIZE),
            depth_texture_samples: get_usize(gl::MAX_DEPTH_TEXTURE_SAMPLES),
            draw_buffers: get_usize(gl::MAX_DRAW_BUFFERS),
            dual_source_draw_buffers: get_usize(gl::MAX_DUAL_SOURCE_DRAW_BUFFERS),
            elements_indices: get_usize(gl::MAX_ELEMENTS_INDICES),
            elements_vertices: get_usize(gl::MAX_ELEMENTS_VERTICES),
            fragment_atomic_counters: get_usize(gl::MAX_FRAGMENT_ATOMIC_COUNTERS),
            fragment_shader_storage_blocks: get_usize(gl::MAX_FRAGMENT_SHADER_STORAGE_BLOCKS),
            fragment_input_components: get_usize(gl::MAX_FRAGMENT_INPUT_COMPONENTS),
            fragment_uniform_components: get_usize(gl::MAX_FRAGMENT_UNIFORM_COMPONENTS),
            fragment_uniform_vectors: get_usize(gl::MAX_FRAGMENT_UNIFORM_VECTORS),
            fragment_uniform_blocks: get_usize(gl::MAX_FRAGMENT_UNIFORM_BLOCKS),
            framebuffer_width: get_usize(gl::MAX_FRAMEBUFFER_WIDTH),
            framebuffer_height: get_usize(gl::MAX_FRAMEBUFFER_HEIGHT),
            framebuffer_layers: get_usize(gl::MAX_FRAMEBUFFER_LAYERS),
            framebuffer_samples: get_usize(gl::MAX_FRAMEBUFFER_SAMPLES),
            geometry_atomic_counters: get_usize(gl::MAX_GEOMETRY_ATOMIC_COUNTERS),
            geometry_shader_storage_blocks: get_usize(gl::MAX_GEOMETRY_SHADER_STORAGE_BLOCKS),
            geometry_input_components: get_usize(gl::MAX_GEOMETRY_INPUT_COMPONENTS),
            geometry_output_components: get_usize(gl::MAX_GEOMETRY_OUTPUT_COMPONENTS),
            geometry_texture_image_units: get_usize(gl::MAX_GEOMETRY_TEXTURE_IMAGE_UNITS),
            geometry_uniform_blocks: get_usize(gl::MAX_GEOMETRY_UNIFORM_BLOCKS),
            geometry_uniform_components: get_usize(gl::MAX_GEOMETRY_UNIFORM_COMPONENTS),
            integer_samples: get_usize(gl::MAX_INTEGER_SAMPLES),
            label_length: get_usize(gl::MAX_LABEL_LENGTH),
            program_texel_offset: get_usize(gl::MAX_PROGRAM_TEXEL_OFFSET),
            rectangle_texture_size: get_usize(gl::MAX_RECTANGLE_TEXTURE_SIZE),
            renderbuffer_size: get_usize(gl::MAX_RENDERBUFFER_SIZE),
            sample_mask_words: get_usize(gl::MAX_SAMPLE_MASK_WORDS),
            server_wait_timeout: get_usize(gl::MAX_SERVER_WAIT_TIMEOUT),
            shader_storage_buffer_bindings: get_usize(gl::MAX_SHADER_STORAGE_BUFFER_BINDINGS),
            tess_control_atomic_counters: get_usize(gl::MAX_TESS_CONTROL_ATOMIC_COUNTERS),
            tess_evaluation_atomic_counters: get_usize(gl::MAX_TESS_EVALUATION_ATOMIC_COUNTERS),
            tess_control_shader_storage_blocks: get_usize(
                gl::MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS,
            ),
            tess_evaluation_shader_storage_blocks: get_usize(
                gl::MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS,
            ),
            texture_buffer_size: get_usize(gl::MAX_TEXTURE_BUFFER_SIZE),
            texture_image_units: get_usize(gl::MAX_TEXTURE_IMAGE_UNITS),
            texture_lod_bias: get_usize(gl::MAX_TEXTURE_LOD_BIAS),
            texture_size: get_usize(gl::MAX_TEXTURE_SIZE),
            uniform_buffer_bindings: get_usize(gl::MAX_UNIFORM_BUFFER_BINDINGS),
            uniform_block_size: get_usize(gl::MAX_UNIFORM_BLOCK_SIZE),
            uniform_locations: get_usize(gl::MAX_UNIFORM_LOCATIONS),
            varying_components: get_usize(gl::MAX_VARYING_COMPONENTS),
            varying_vectors: get_usize(gl::MAX_VARYING_VECTORS),
            varying_floats: get_usize(gl::MAX_VARYING_FLOATS),
            vertex_atomic_counters: get_usize(gl::MAX_VERTEX_ATOMIC_COUNTERS),
            vertex_attribs: get_usize(gl::MAX_VERTEX_ATTRIBS),
            vertex_shader_storage_blocks: get_usize(gl::MAX_VERTEX_SHADER_STORAGE_BLOCKS),
            vertex_texture_image_units: get_usize(gl::MAX_VERTEX_TEXTURE_IMAGE_UNITS),
            vertex_uniform_components: get_usize(gl::MAX_VERTEX_UNIFORM_COMPONENTS),
            vertex_uniform_vectors: get_usize(gl::MAX_VERTEX_UNIFORM_VECTORS),
            vertex_output_components: get_usize(gl::MAX_VERTEX_OUTPUT_COMPONENTS),
            vertex_uniform_blocks: get_usize(gl::MAX_VERTEX_UNIFORM_BLOCKS),
            viewport_dims: get_usize(gl::MAX_VIEWPORT_DIMS),
            viewports: get_usize(gl::MAX_VIEWPORTS),
            vertex_attrib_relative_offset: get_usize(gl::MAX_VERTEX_ATTRIB_RELATIVE_OFFSET),
            vertex_attrib_bindings: get_usize(gl::MAX_VERTEX_ATTRIB_BINDINGS),
            element_index: get_usize(gl::MAX_ELEMENT_INDEX),
            _private_marker: (),
        }
    }
}
